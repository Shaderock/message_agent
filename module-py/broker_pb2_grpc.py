# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import broker_pb2 as broker__pb2


class BrokerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.handshake = channel.unary_unary(
                '/broker.BrokerService/handshake',
                request_serializer=broker__pb2.HandshakeRequest.SerializeToString,
                response_deserializer=broker__pb2.HandshakeResponse.FromString,
                )
        self.getModules = channel.unary_unary(
                '/broker.BrokerService/getModules',
                request_serializer=broker__pb2.EmptyIdRequest.SerializeToString,
                response_deserializer=broker__pb2.GetModulesResponse.FromString,
                )
        self.subscribe = channel.unary_unary(
                '/broker.BrokerService/subscribe',
                request_serializer=broker__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=broker__pb2.SubscribeResponse.FromString,
                )
        self.sendMessage = channel.unary_unary(
                '/broker.BrokerService/sendMessage',
                request_serializer=broker__pb2.MessageRequest.SerializeToString,
                response_deserializer=broker__pb2.EmptyMessage.FromString,
                )
        self.close = channel.unary_unary(
                '/broker.BrokerService/close',
                request_serializer=broker__pb2.EmptyIdRequest.SerializeToString,
                response_deserializer=broker__pb2.EmptyMessage.FromString,
                )


class BrokerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def handshake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getModules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.handshake,
                    request_deserializer=broker__pb2.HandshakeRequest.FromString,
                    response_serializer=broker__pb2.HandshakeResponse.SerializeToString,
            ),
            'getModules': grpc.unary_unary_rpc_method_handler(
                    servicer.getModules,
                    request_deserializer=broker__pb2.EmptyIdRequest.FromString,
                    response_serializer=broker__pb2.GetModulesResponse.SerializeToString,
            ),
            'subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribe,
                    request_deserializer=broker__pb2.SubscribeRequest.FromString,
                    response_serializer=broker__pb2.SubscribeResponse.SerializeToString,
            ),
            'sendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=broker__pb2.MessageRequest.FromString,
                    response_serializer=broker__pb2.EmptyMessage.SerializeToString,
            ),
            'close': grpc.unary_unary_rpc_method_handler(
                    servicer.close,
                    request_deserializer=broker__pb2.EmptyIdRequest.FromString,
                    response_serializer=broker__pb2.EmptyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'broker.BrokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BrokerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/broker.BrokerService/handshake',
            broker__pb2.HandshakeRequest.SerializeToString,
            broker__pb2.HandshakeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/broker.BrokerService/getModules',
            broker__pb2.EmptyIdRequest.SerializeToString,
            broker__pb2.GetModulesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/broker.BrokerService/subscribe',
            broker__pb2.SubscribeRequest.SerializeToString,
            broker__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/broker.BrokerService/sendMessage',
            broker__pb2.MessageRequest.SerializeToString,
            broker__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/broker.BrokerService/close',
            broker__pb2.EmptyIdRequest.SerializeToString,
            broker__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
